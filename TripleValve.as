package {	import flash.display.MovieClip;	import flash.events.Event;	import com.greensock.TweenLite;	import com.greensock.TimelineLite;	import com.greensock.easing.Quint;	import com.greensock.plugins.*;	TweenPlugin.activate([TintPlugin, HexColorsPlugin]);	public class TripleValve extends MovieClip {		private var slideValve:SlideValve;		private var exhaustAir:ExhaustAir;		private var mainValveAir:MainValveAir;		private var cylinderAir:CylinderAir;		private var brakePipeAir:BrakePipeAir;		private var gapAir:GapAir;		private var emergencyAir:EmergencyAir;		private var auxFull:AuxilaryFull;		private var auxEmpty:AuxilaryEmpty;		private var auxMask:AuxilaryMask;		private var brakeCylFull:BrakeCylFull;		private var brakeCylEmpty:BrakeCylEmpty;		private var brakeCylMask:BrakeCylMask;		private var brakeBlock:BrakeBlock;		private var brakeSpring:BrakeSpring;		public function TripleValve():void {			this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		public function slideIt(position:String, opening:Number = 0):void {			var range:uint;			var tl1 = new TimelineLite();			var tl2 = new TimelineLite();			switch (position) {				case "release" :					TweenLite.to(this.slideValve, 1, {x:-5});					TweenLite.to(this.auxMask,5, {height:150,ease:Quint.easeOut});					TweenLite.to(this.brakeCylMask,2, {width:17,ease:Quint.easeOut});					TweenLite.to(this.brakeBlock,2, {x:-195,ease:Quint.easeOut});					TweenLite.to(this.brakeSpring,2, {width:55,ease:Quint.easeOut});					tl2.to(this.exhaustAir, 1, {alpha:1})					   .to(this.exhaustAir, 1, {alpha:0})					   .to(this.cylinderAir, 1, {alpha:0},0)					   .to(this.cylinderAir, 1, {alpha:1},1);					TweenLite.to(this.mainValveAir, 1, {alpha:1});					TweenLite.to(this.brakePipeAir, 1, {alpha:1});					TweenLite.to(this.gapAir, 1, {alpha:1, width:20, tint:0x0033FF});					TweenLite.to(this.emergencyAir, 0, {alpha:0});					break;				case "lap" :					range = 15 + Math.round(10 * opening);					//slide valve to opening position then to lap possition;					tl1.to(this.slideValve, 1, {x:range})					   .to(this.slideValve, 1, {x:15});					//aux tank full range is 140px and 550kpa, BP range is 140kPa. 					TweenLite.to(this.auxMask,1, {height:150 - ((140/550) * (140*opening))});					//brake block x from 0 to 55, Cylinder from 17 to 200					TweenLite.to(this.brakeCylMask,1, {width:17 + (183 * opening)});					TweenLite.to(this.brakeBlock,1, {x:-195 - (55 * opening)});					TweenLite.to(this.brakeSpring,1, {width:55 - (55 * opening)});					//air					TweenLite.to(this.exhaustAir, 1, {alpha:0});					TweenLite.to(this.cylinderAir, 1, {alpha:0});					TweenLite.to(this.gapAir, 1, {alpha:0});					TweenLite.to(this.emergencyAir, 0, {alpha:0});					TweenLite.to(this.brakePipeAir, 1, {alpha:(1-((opening*140)/300))});					break;				case "applied" :					TweenLite.to(this.slideValve, 1, {x:35});					//set aux to 425kPa					TweenLite.to(this.auxMask,2, {height:150 - ((140/550) * 140),ease:Quint.easeOut});					TweenLite.to(this.brakeCylMask,2, {width:200});					TweenLite.to(this.brakeBlock,2, {x:-250});					TweenLite.to(this.brakeSpring,2, {width:0});					//air					TweenLite.to(this.exhaustAir, 1, {alpha:0});					TweenLite.to(this.cylinderAir, 1, {alpha:0});					TweenLite.to(this.brakePipeAir, 1, {alpha:0});					TweenLite.to(this.gapAir, 1, {alpha:1, width:50, tint:0xFFFFFF});					TweenLite.to(this.emergencyAir, 0, {alpha:1});					break;			}		}		private function onAddedToStage(event:Event):void {			//add auxilary tank			this.auxEmpty = new AuxilaryEmpty();			addChild(this.auxEmpty);			this.auxEmpty.x = -220;			this.auxEmpty.y = -76;			this.auxMask = new AuxilaryMask();			addChild(this.auxMask);			this.auxMask.x = -210;			this.auxMask.y = -30;			this.auxFull = new AuxilaryFull();			addChild(this.auxFull);			this.auxFull.x = -220;			this.auxFull.y = -76;			this.auxFull.mask = this.auxMask;			//add brake cylinder			this.brakeCylEmpty = new BrakeCylEmpty();			addChild(this.brakeCylEmpty);			this.brakeCylEmpty.x = -150;			this.brakeCylEmpty.y = 120;			this.brakeCylMask = new BrakeCylMask();			addChild(this.brakeCylMask);			this.brakeCylMask.x = -110;			this.brakeCylMask.y = 120;			this.brakeCylFull = new BrakeCylFull();			addChild(this.brakeCylFull);			this.brakeCylFull.x = -150;			this.brakeCylFull.y = 120;			this.brakeCylFull.mask = this.brakeCylMask;			this.brakeBlock = new BrakeBlock();			addChild(this.brakeBlock);			this.brakeBlock.x = -195;			this.brakeBlock.y = 123;			this.brakeSpring = new  BrakeSpring();			addChild(this.brakeSpring);			this.brakeSpring.x = -182;			this.brakeSpring.y = 120;						//add air			this.mainValveAir = new MainValveAir();			addChild(this.mainValveAir);			this.mainValveAir.x = -8;			this.mainValveAir.y = 30;			TweenLite.to(this.mainValveAir, 0, {alpha:0});			this.exhaustAir = new ExhaustAir();			addChild(this.exhaustAir);			this.exhaustAir.x = 4;			this.exhaustAir.y = 24;			TweenLite.to(this.exhaustAir, 0, {alpha:0});			this.cylinderAir = new CylinderAir();			addChild(this.cylinderAir);			this.cylinderAir.x = -8;			this.cylinderAir.y = 30;			TweenLite.to(this.cylinderAir, 0, {alpha:1});			this.brakePipeAir = new BrakePipeAir();			addChild(this.brakePipeAir);			this.brakePipeAir.x = -8;			this.brakePipeAir.y = 30;			TweenLite.to(this.brakePipeAir, 0, {alpha:0});			this.gapAir = new GapAir();			addChild(this.gapAir);			this.gapAir.x = 55;			this.gapAir.y = 14;			TweenLite.to(this.gapAir, 0, {alpha:0});			this.emergencyAir = new EmergencyAir();			addChild(this.emergencyAir);			this.emergencyAir.x = 55;			this.emergencyAir.y = 14;			TweenLite.to(this.emergencyAir, 0, {alpha:0});			//add slide valve			this.slideValve = new SlideValve();			addChild(this.slideValve);			this.slideValve.x = -5;			this.slideValve.y = -16;						this.addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			this.removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onRemovedFromStage(event:Event):void {			this.removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);		}	}}