package {	import flash.display.Sprite;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import flash.events.Event;	public class KeyboardInput extends Sprite {		//variables		//dispatch constants		public static const KEY_RELEASE:String = "KeyboardKeyReleaseEvent";		public static const KEY_PRESSED:String = "KeyboardKeyPressEvent";		//keyboard variables		protected var _key0:Boolean = false; //brake handle position		protected var _key1:Boolean = false;		protected var _key2:Boolean = false;		protected var _key3:Boolean = false;		protected var _key4:Boolean = false;		protected var _key5:Boolean = false;		protected var _key6:Boolean = false;		protected var _key7:Boolean = false;		protected var _key8:Boolean = false; //emergency		protected var _keyE:Boolean = false; //EP CB		protected var _keyO:Boolean = false; //Bvic open		protected var _keyC:Boolean = false; //Bvic close		protected var _pressed:Boolean = false;		public function KeyboardInput() {			addEventListener(Event.ADDED_TO_STAGE, initialise);		}		public function get key0():Boolean {			return _key0;		}		public function get key1():Boolean {			return _key1;		}		public function get key2():Boolean {			return _key2;		}		public function get key3():Boolean {			return _key3;		}		public function get key4():Boolean {			return _key4;		}		public function get key5():Boolean {			return _key5;		}		public function get key6():Boolean {			return _key6;		}		public function get key7():Boolean {			return _key7;		}		public function get key8():Boolean {			return _key8;		}		public function get keyE():Boolean {			return _keyE;		}		public function get keyO():Boolean {			return _keyO;		}		public function get keyC():Boolean {			return _keyC;		}				public function get isPressed():Boolean {			return _pressed;		}		protected function initialise(e:Event):void {			stage.addEventListener(KeyboardEvent.KEY_DOWN, setKeys, false, 0, true);			stage.addEventListener(KeyboardEvent.KEY_UP, releaseKeys, false, 0, true);		}		protected function setKeys(e:KeyboardEvent):void {			switch (e.keyCode) {				case Keyboard.NUMBER_0 :					_key0 = true;					break;				case Keyboard.NUMBER_1 :					_key1 = true;					break;				case Keyboard.NUMBER_2 :					_key2 = true;					break;				case Keyboard.NUMBER_3 :					_key3 = true;					break;				case Keyboard.NUMBER_4 :					_key4 = true;					break;				case Keyboard.NUMBER_5 :					_key5 = true;					break;				case Keyboard.NUMBER_6 :					_key6 = true;					break;				case Keyboard.NUMBER_7 :					_key7 = true;					break;				case Keyboard.NUMBER_8 :					_key8 = true;					break;				case Keyboard.E :					_keyE = true;					break;				case Keyboard.O :					_keyO = true;					break;				case Keyboard.C :					_keyC = true;					break;			}			if (! _pressed) {				_pressed = true;				dispatchEvent(new KeyboardEvent(KEY_PRESSED));			}		}		protected function releaseKeys(e:KeyboardEvent):void {			if (_pressed) {				_pressed = false;				dispatchEvent(new KeyboardEvent(KEY_RELEASE));			}			switch (e.keyCode) {				case Keyboard.NUMBER_0 :					_key0 = false;					break;				case Keyboard.NUMBER_1 :					_key1 = false;					break;				case Keyboard.NUMBER_2 :					_key2 = false;					break;				case Keyboard.NUMBER_3 :					_key3 = false;					break;				case Keyboard.NUMBER_4 :					_key4 = false;					break;				case Keyboard.NUMBER_5 :					_key5 = false;					break;				case Keyboard.NUMBER_6 :					_key6 = false;					break;				case Keyboard.NUMBER_7 :					_key7 = false;					break;				case Keyboard.NUMBER_8 :					_key8 = false;					break;				case Keyboard.E :					_keyE = false;					break;				case Keyboard.O :					_keyO = false;					break;				case Keyboard.C :					_keyC = false;					break;			}		}	}}