package {	import flash.display.MovieClip;	import flash.display.Sprite;	import flashx.textLayout.formats.Float;	import flash.text.TextField;	import flash.text.TextFormat;	public class Gauge extends MovieClip {		// properties		private var radius:Number;		private var colour:uint;		private var maxScale:uint;		private var needleWhite:GaugePointerWhite;		private var needleRed:GaugePointerRed;		// constructor		public function Gauge(radius:Number,colour:uint,maxScale:uint,redNeedle:Boolean=false) {			this.radius = radius;			this.colour = colour;			this.maxScale = maxScale;			this.needleWhite = new GaugePointerWhite;			//draw gauge			drawGraphics();			//add needle			addChild(needleWhite);			needleWhite.scaleX = radius / 100			needleWhite.scaleY = radius / 100			//add red needle if needed			if (redNeedle) {				this.needleRed = new GaugePointerRed;				addChild(needleRed);				needleRed.scaleX = radius / 100				needleRed.scaleY = radius / 100			}		}		// methods		public function setNeedle(scale:Number, type:String="white"):void {			//convert to base			var tick:Number = 315 / maxScale;			var frameToGo:Number = scale * tick;			if (type == "white") {				needleWhite.setPosition(frameToGo);			} else {				needleRed.setPosition(frameToGo);			}		}				public function getNeedleValue(type:String="white"):uint {			var tick:Number = 315 / maxScale;					if (type == "white") {				return needleWhite.getPosition() / tick;			} else {				return needleRed.getPosition() / tick;							}		}				private function drawGraphics():void {			var dx:Number,dy:Number,cx:Number,cy:Number,angle:Number,segments:Number,notch:Number,arcLength:Number = 315;			var scale:Array = new Array(10),kpa:TextField = new TextField,i:uint = 0,unit:uint = maxScale / 10;			var format:TextFormat = new TextFormat();			scale[0] = new TextField  ;			scale[1] = new TextField  ;			scale[2] = new TextField  ;			scale[3] = new TextField  ;			scale[4] = new TextField  ;			scale[5] = new TextField  ;			scale[6] = new TextField  ;			scale[7] = new TextField  ;			scale[8] = new TextField  ;			scale[9] = new TextField  ;			scale[10] = new TextField  ;			//draw outline			graphics.lineStyle(2,colour);			graphics.drawCircle(0,0,radius);			graphics.drawCircle(0,0,radius * 0.95);			DrawingShapes.drawArc(graphics,Math.sin(22.5 / 180 * Math.PI) * radius * 0.85,Math.cos(22.5 / 180 * Math.PI) * radius * 0.85,radius * 0.85,arcLength,-67.5);			//draw ticks - and scale;			angle = 337.5;			segments = arcLength / 30;			while (angle >= 22.5) {				//start				cx = Math.sin(angle / 180 * Math.PI) * radius * 0.85;				cy = Math.cos(angle / 180 * Math.PI) * radius * 0.85;				//end				notch = angle % (segments * 3) == 22.5 ? 0.75 : 0.8;				dx = Math.sin(angle / 180 * Math.PI) * radius * notch;				dy = Math.cos(angle / 180 * Math.PI) * radius * notch;				//draw tick				graphics.moveTo(cx,cy);				graphics.lineTo(dx,dy);				//draw scale;				if (notch == 0.75) {					scale[i].text = i * unit;					format.size = 12 * (radius / 100);					scale[i].setTextFormat(format);					dx = Math.sin(angle / 180 * Math.PI) * radius * (notch-0.05);					dy = Math.cos(angle / 180 * Math.PI) * radius * (notch-0.05);					//fix positioning					switch (i) {						case 0 :							dy -= (scale[i].textHeight+1);							break;						case 1 :						case 2 :							dy -= (scale[i].textHeight+1) / 2;							break;						case 4 :						case 5 :						case 6 :							dx -= (scale[i].textWidth+4) / 2;							break;						case 7 :							dx -= (scale[i].textWidth+4);							break;						case 8 :						case 9 :							dx -= (scale[i].textWidth+4);							dy -= (scale[i].textHeight+1) / 2;							break;						case 10 :							dx -= (scale[i].textWidth+4) * 0.75;							dy -= (scale[i].textHeight+1);							break;					}					scale[i].x = dx;					scale[i].y = dy;					scale[i].height = scale[i].textHeight + 1;					scale[i].width = scale[i].textWidth + 4;					addChild(scale[i]);					i++;;				}				angle -=  segments;			}			//draw midpoint			graphics.beginFill(colour);			graphics.drawCircle(0,0,5 * (radius/100));			graphics.endFill();			//draw kpa;			kpa.text = "kPa";	        format.size = 20 * (radius / 100);    	    format.bold = true;			kpa.setTextFormat(format);			kpa.x = 0 - (kpa.textWidth + 4) / 2;			kpa.y = radius / 4;			kpa.height = kpa.textHeight + 1;			kpa.width = kpa.textWidth + 4;			addChild(kpa);		}	}}