package {	import flash.display.MovieClip;	import flash.ui.Mouse;	import flash.events.MouseEvent;	import flash.events.Event;	import com.greensock.TweenLite;	import com.greensock.easing.Linear;	public class BVIC extends MovieClip {		private var _isClosed:Boolean;		private const _maxRotation:int = -90;		public static const END_ANIMATION:String = "BvicEndAnimation";		public function BVIC():void {			this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		public function isOpen():Boolean {			return !_isClosed;		}		public function isClosed():Boolean {			return _isClosed;		}		public function setToOpen():void {			if (this.rotation != _maxRotation) {				TweenLite.to(this, 1, {rotation:-90, ease:Linear.easeNone, onComplete:onEndTween});			}			_isClosed = false;		}				public function setToClosed():void {			if (this.rotation != 0) {				TweenLite.to(this, 1, {rotation:0, ease:Linear.easeNone, onComplete:onEndTween});			}			_isClosed = true;		}				private function onEndTween():void {			dispatchEvent(new MouseEvent(END_ANIMATION));		}				private function onAddedToStage(event:Event) {			_isClosed = true;			this.addEventListener(Event.ENTER_FRAME, onEnter);			this.addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			this.addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);			stage.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDownx);			stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUpx);			this.removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onRemovedFromStage(event:Event):void {			this.removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			this.removeEventListener(Event.ENTER_FRAME, onEnter);			stage.removeEventListener(MouseEvent.MOUSE_DOWN, onMouseDownx);			stage.removeEventListener(MouseEvent.MOUSE_UP, onMouseUpx);		}		private function onEnter(event:Event):void {			// might not need		}		private function onMouseOver(event:MouseEvent):void {			this.buttonMode = true;		}		private function onMouseDownx(event:MouseEvent):void {			if (event.target.name == "BVIC") {				stage.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMovex);			}		}		private function onMouseMovex(event:MouseEvent):void {			var dx:int = stage.mouseX - this.x;			var dy:int = stage.mouseY - this.y;			var rot:int = Math.atan2(dy,dx) * 180 / Math.PI;			if (checkRotation(rot)) {				this.rotation = rot;				updateStatus(rot);			}		}		private function onMouseUpx(event:MouseEvent):void {			if (stage.hasEventListener(MouseEvent.MOUSE_MOVE)) {				stage.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMovex);			}		}		private function checkRotation(rot:int):Boolean {			return (rot >= _maxRotation && rot <= 0);		}		private function updateStatus(rot:int):void {			_isClosed = rot != -90;		}	}}