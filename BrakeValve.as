package {	import flash.display.MovieClip;	import flash.events.Event;	import com.greensock.TweenLite;	import com.greensock.TimelineLite;	import com.greensock.easing.*;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.BlurFilterPlugin;	import com.greensock.plugins.ScalePlugin;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;	import fl.controls.Button;	import flash.events.FullScreenEvent;	TweenPlugin.activate([BlurFilterPlugin,ScalePlugin]);	public class BrakeValve extends MovieClip {		//variables		private var activeComp:Object = {name:"",components:[],origX:0,origY:0};//name, components, orig x, orig y 		private var isActive:Object = {chargingValve:false,relayValve:false,regulatingValve:false,bvic:false,rpValve:false,lomv:false};		private var compTxt:TextField,formatTxt:TextFormat;		private var previousPressure:uint = 0,previousStep:uint = 0;		private var fullSimulation:Button,buttonLabel:Array = ["Full Simulation","Separate Simulation"];		private var fullBackground:FullBackground;		private var chargingValve:ChargingValve,chargingValveSlider:ChargingValveSlider;		private var relayValve:RelayValve,relayValveDiapham:RelayValveDiapham;		private var relayValveChargeFlap:RelayValveChargeFlap,relayValveExhaustFlap:RelayValveExhaustFlap;		private var lomv:Lomv,lomvSlider:LomvSlider,lomvBall:LomvBall;		private var rpValve:ReleasePreventionValve,rpValveSlider:ReleasePreventionValveSlider;		private var bvic:BviCock,bvicSlider:BviCockSlider;		private var regulatingValve:RegulatingValve,regulatingValveSlider:RegulatingValveSlider,regulatingValveLevel:RegulatingValveLevel;		//Airs		private var airRVEq:AirRelayValveEq,airRVBp:AirRelayValveBp;		private var airRPOut:AirReleasePreventionOut,airRPIn:AirReleasePreventionIn;		private var airLomv:AirLomv;		private var airRegV:AirRegulatingValve,airRegVJ:AirRegulatingValveJ;		private var airCVOpen:AirChargingValveOpen,airCVClosed:AirChargingValveClosed;		private var airBvic:AirBviCock;		private var airRPtoRV:AirRPtoRV,airCVtoRV:AirCVtoRV,airCVtoE:AirCVtoE,airRVtoBV:AirRVtoBV;		private var airBVtoBP:AirBVtoBP,airRVtoLM:AirRVtoLM,airEQ:AirEQ;		//set info for components, starting x, y		private var chargingValveInfo:Object = {origX:0,origY:150,desc:"Charge/Emerg. Exhuast Valve"};		private var relayValveInfo:Object = {origX:0,origY:0,desc:"Relay Valve"};		private var lomvInfo:Object = {origX:0,origY:270,desc:"Lockout Magnet Valve"};		private var rpValveInfo:Object = {origX:700,origY:0,desc:"Release Prevention Valve"};		private var bvicInfo:Object = {origX:700,origY:150,desc:"BVIC"};		private var regulatingValveInfo:Object = {origX:700,origY:270,desc:"Regulating Valve"};		//constructor		public function BrakeValve():void {			this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			this.addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);			this.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);			this.addEventListener(MouseEvent.CLICK, onMouseClick);		}		//main function to animate components		public function animateIt(position:String, pressure:uint, step:uint, onAir:Boolean, bvicOpen:Boolean):void {			//animate the active components			var tl:TimelineLite = new TimelineLite({paused:true});			var pressurePercent = Math.abs(550 - pressure) / 140;			if (pressurePercent == 0) {				this.previousPressure = 550;			}			if (step == 0) {				this.previousStep = 0;			}			//charging valve			if (isActive.chargingValve) {				if (position == "emergency") {					tl.to(this.chargingValveSlider, 0.5, {x:30, ease:Linear.easeNone}, 0);					tl.to([this.airCVOpen, this.airCVtoRV], 0, {alpha:0}, 0);					tl.to([this.airCVClosed,this.airCVtoE], 1, {alpha:1}, 0.5);					tl.to([this.airCVClosed,this.airCVtoE], 1, {alpha:0}, 1.5);				} else {					tl.to(this.chargingValveSlider, 0.5, {x:0, ease:Linear.easeNone}, 0);					tl.to([this.airCVOpen,this.airCVtoRV], 0.5, {alpha:1}, 0.5);				}			}			//relay valve			if (isActive.relayValve) {				if ((position == "release")) {					tl.to(this.relayValveDiapham, 2, {width :10}, 0);					tl.to([this.airRVBp,this.airBvic, this.airRVtoBV], 1, {alpha:1}, 0.5);					tl.to([this.airRVEq,this.airEQ], 1, {alpha:1}, 0);					tl.to(this.relayValveChargeFlap, 1, {rotation:60, ease:Sine.easeOut}, 0.5);					tl.to(this.relayValveChargeFlap, 1, {rotation:0, ease:Sine.easeOut}, 1.5);					if (bvicOpen) {						tl.to(this.airBVtoBP, 1, {alpha:1}, 0.5);					}				} else if (onAir && position == "applied" && this.relayValveDiapham.width <= (10 + pressurePercent * 70)) {					tl.to(this.relayValveDiapham, 2, {width:10 + pressurePercent * 70}, 0);					tl.to([this.airRVBp,this.airBvic, this.airRVtoBV], 1, {alpha:(1-((pressurePercent*7)/15))}, 0.5);					tl.to([this.airRVEq,this.airEQ], 1, {alpha:(1-((pressurePercent*7)/15))}, 0);					tl.to(this.relayValveExhaustFlap, 1, {rotation:60, ease:Sine.easeOut}, 0);					tl.to(this.relayValveExhaustFlap, 1, {rotation:0, ease:Sine.easeOut}, 1);					tl.to(this.airCVtoE, 1, {alpha:(1-((pressurePercent*7)/15))}, 0);					tl.to(this.airCVtoE, 1, {alpha:0}, 1);					if (bvicOpen) {						tl.to(this.airBVtoBP, 1, {alpha:(1-((pressurePercent*7)/15))}, 0.5);					}				} else if (position == "emergency") {					if (onAir) {						tl.to([this.airRVEq,this.airEQ], 1, {alpha:(1-((1*7)/15))}, 0);					}					if (bvicOpen) {						tl.to([this.airRVBp,this.airBvic,this.airRVtoBV, this.airBVtoBP], 1, {alpha:0}, 0.5);					} else {						tl.to(this.airBVtoBP, 1, {alpha:0}, 0.5);					}				}			}			//regulating valve			if (isActive.regulatingValve) {				if (step > 7) {					step = 7;				}				if (pressurePercent > 1) {					pressurePercent = 1;				}				if (pressure < this.previousPressure || (step > this.previousStep && ! onAir)) {					tl.to(this.regulatingValveSlider, 1, {x:-10, ease:Sine.easeOut}, 0);					tl.to(this.regulatingValveSlider, 1, {x:0, ease:Sine.easeOut}, 1);					if (onAir) {						tl.to([this.airRegV,this.airRVtoLM], 1, {alpha:(1-((pressurePercent*7)/15))}, 0);						tl.to(this.airRegVJ, 1, {alpha:(1-((pressurePercent*7)/15))}, 0);					} else {						tl.to([this.airRegV,this.airRVtoLM], 1, {alpha:(1-(step/15))}, 0);						tl.to(this.airRegVJ, 1, {alpha:(1-(step/15))}, 0);					}					tl.to(this.airRegVJ, 1, {alpha:0}, 1);				}				if (position == "release") {					tl.to([this.airRegV,this.airRVtoLM], 1, {alpha:1}, 0);				}				if (! onAir) {					tl.to(this.regulatingValveLevel, 0.5, {scaleY:1-step/7, ease:Linear.easeNone}, 0);				} else if (pressurePercent >= 0 && pressurePercent <= 1) {					tl.to(this.regulatingValveLevel, 0.5, {scaleY:1-pressurePercent, ease:Linear.easeNone}, 0);				}			}			//bvic			if (isActive.bvic) {				if (bvicOpen) {					tl.to(this.bvicSlider, 0.5, {x:-15, ease:Linear.easeNone}, 0);				} else {					tl.to(this.bvicSlider, 0.5, {x:0, ease:Linear.easeNone}, 0);				}			}			//release prevention valve			if (isActive.rpValve) {				if (position == "release") {					tl.to(this.rpValveSlider, 0.5, {x:0, ease:Linear.easeNone}, 0);					tl.to(this.airRPOut, 0.5, {alpha:1}, 0);					tl.to(this.airRPtoRV, 0.5, {alpha:1}, 0);				} else {					tl.to(this.rpValveSlider, 0.5, {x:12, ease:Linear.easeNone}, 0);					tl.to(this.airRPOut, 0.5, {alpha:0}, 0);					tl.to(this.airRPtoRV, 0.5, {alpha:0}, 0);				}			}			//lockout magnet valve			if (isActive.lomv) {				if (onAir) {					tl.to(this.lomvSlider, 0.5, {y:25, ease:Linear.easeNone}, 0);					tl.to(this.lomvBall, 0.5, {y:25, x:0, ease:Linear.easeNone}, 0);					if (pressure < this.previousPressure || position == "release") {						tl.to(this.airLomv, 1, {alpha:(1-((pressurePercent*7)/15))}, 0);					}				} else {					tl.to(this.lomvSlider, 0.5, {y:0, ease:Linear.easeNone}, 0);					tl.to(this.airLomv, 1, {alpha:1}, 0);					if (this.lomvBall.y == 25 || position == "release") {						tl.to(this.lomvBall, 0.5, {y:0, ease:Linear.easeNone}, 0);						tl.to(this.lomvBall, 1, {x:5, ease:Linear.easeNone}, 0.5);						tl.to(this.lomvBall, 0.5, {x:0, ease:Linear.easeNone}, 1.5);					}				}			}			this.previousPressure = pressure;			this.previousStep = step;			//animate it			tl.play();		}		private function onMouseOver(event:MouseEvent):void {			this.buttonMode = true;			if (event.target.name == "fullSimulation" || event.target.name == "fullBackground") {				return;			}			if (! this.compTxt && event.target.name != this.activeComp.name) {				//set up name of component				this.formatTxt = new TextFormat();				this.formatTxt.size = 20;				this.formatTxt.font = "Georgia";				this.formatTxt.bold = true;				this.formatTxt.align = TextFormatAlign.CENTER;				this.compTxt = new TextField  ;				this.compTxt.background = true;				this.compTxt.backgroundColor = 0x000000;				this.compTxt.textColor = 0xFFFFFF;				this.compTxt.defaultTextFormat = this.formatTxt;				switch (event.target.name) {					case "chargingValve" :						this.compTxt.text = this.chargingValveInfo.desc;						this.compTxt.x = this.chargingValve.x - 105;						this.compTxt.y = this.chargingValve.y - 40;						break;					case "relayValve" :						this.compTxt.text = this.relayValveInfo.desc;						this.compTxt.x = this.relayValve.x - 70;						this.compTxt.y = this.relayValve.y - 75;						break;					case "lomv" :						this.compTxt.text = this.lomvInfo.desc;						this.compTxt.x = this.lomv.x - 90;						this.compTxt.y = this.lomv.y - 75;						break;					case "rpValve" :						this.compTxt.text = this.rpValveInfo.desc;						this.compTxt.x = this.rpValve.x - 150;						this.compTxt.y = this.rpValve.y - 50;						break;					case "bvic" :						this.compTxt.text = this.bvicInfo.desc;						this.compTxt.x = this.bvic.x - 40;						this.compTxt.y = this.bvic.y - 50;						break;					case "regulatingValve" :						this.compTxt.text = this.regulatingValveInfo.desc;						this.compTxt.x = this.regulatingValve.x - 80;						this.compTxt.y = this.regulatingValve.y - 50;						break;				}				this.compTxt.height = this.compTxt.textHeight + 5;				this.compTxt.width = this.compTxt.textWidth + 20;				addChild(this.compTxt);				TweenLite.from(this.compTxt, 0.5, {alpha:0});			}		}		private function onMouseOut(event:MouseEvent):void {			if (this.compTxt && event.target.name != this.activeComp.name) {				removeChild(this.compTxt);				this.compTxt = null;			}		}		//place components on screen to be clicked		private function onAddedToStage(event:Event):void {			//charging valve			this.chargingValve = new ChargingValve();			this.chargingValve.name = "chargingValve";			addChild(this.chargingValve);			this.chargingValve.x = chargingValveInfo.origX;			this.chargingValve.y = chargingValveInfo.origY;			this.chargingValveSlider = new ChargingValveSlider();			this.chargingValveSlider.name = "chargingValve";			this.chargingValve.addChild(this.chargingValveSlider);			//relay valve;			this.relayValve = new RelayValve();			this.relayValve.name = "relayValve";			addChild(this.relayValve);			this.relayValve.x = relayValveInfo.origX;			this.relayValve.y = relayValveInfo.origY;			this.airRVBp = new AirRelayValveBp();			this.airRVBp.name = 'relayValve';			this.relayValve.addChild(this.airRVBp);			this.airRVEq = new AirRelayValveEq();			this.airRVEq.name = 'relayValve';			this.relayValve.addChild(this.airRVEq);			this.relayValveDiapham = new RelayValveDiapham();			this.relayValveDiapham.name = "relayValve";			this.relayValve.addChild(this.relayValveDiapham);			this.relayValveChargeFlap = new RelayValveChargeFlap();			this.relayValveChargeFlap.name = "relayValve";			this.relayValve.addChild(this.relayValveChargeFlap);			this.relayValveChargeFlap.x = 70;			this.relayValveChargeFlap.y = -45;			this.relayValveExhaustFlap = new RelayValveExhaustFlap();			this.relayValveExhaustFlap.name = "relayValve";			this.relayValve.addChild(this.relayValveExhaustFlap);			this.relayValveExhaustFlap.x = 70;			this.relayValveExhaustFlap.y = 45;			//lomv			this.lomv = new Lomv();			this.lomv.name = "lomv";			addChild(this.lomv);			this.lomv.x = lomvInfo.origX;			this.lomv.y = lomvInfo.origY;			this.lomvSlider = new LomvSlider();			this.lomvSlider.name = "lomv";			this.lomv.addChild(this.lomvSlider);			this.lomvBall = new LomvBall();			this.lomvBall.name = "lomv";			this.lomv.addChild(this.lomvBall);			//release prevention valve;			this.rpValve = new ReleasePreventionValve();			this.rpValve.name = "rpValve";			addChild(this.rpValve);			this.rpValve.x = rpValveInfo.origX;			this.rpValve.y = rpValveInfo.origY;			this.airRPOut = new AirReleasePreventionOut();			this.airRPOut.name = "rpValve";			this.rpValve.addChild(this.airRPOut);			this.airRPIn = new AirReleasePreventionIn();			this.airRPIn.name = "rpValve";			this.rpValve.addChild(this.airRPIn);			this.rpValveSlider = new ReleasePreventionValveSlider();			this.rpValveSlider.name = "rpValve";			this.rpValve.addChild(this.rpValveSlider);			//bvic;			this.bvic = new BviCock();			this.bvic.name = "bvic";			addChild(this.bvic);			this.bvic.x = bvicInfo.origX;			this.bvic.y = bvicInfo.origY;			this.bvicSlider = new BviCockSlider();			this.bvicSlider.name = "bvic";			this.bvic.addChild(this.bvicSlider);			//regulating valve;			this.regulatingValve = new RegulatingValve();			this.regulatingValve.name = "regulatingValve";			addChild(this.regulatingValve);			this.regulatingValve.x = regulatingValveInfo.origX;			this.regulatingValve.y = regulatingValveInfo.origY;			this.airRegV = new AirRegulatingValve();			this.airRegV.name = "regulatingValve";			this.regulatingValve.addChild(this.airRegV);			this.airRegVJ = new AirRegulatingValveJ();			this.airRegVJ.name = "regulatingValve";			this.airRegVJ.alpha = 0;			this.regulatingValve.addChild(this.airRegVJ);			this.regulatingValveSlider = new RegulatingValveSlider();			this.regulatingValveSlider.name = "regulatingValve";			this.regulatingValve.addChild(this.regulatingValveSlider);			this.regulatingValveLevel = new RegulatingValveLevel();			this.regulatingValveLevel.name = "regulatingValve";			this.regulatingValve.addChild(this.regulatingValveLevel);			this.regulatingValveLevel.x = 7.5;			this.regulatingValveLevel.y = 5;			//set up Silumation Button			this.fullSimulation = new Button();			this.fullSimulation.move(280,-70);			this.fullSimulation.width = 150;			this.fullSimulation.buttonMode = true;			this.fullSimulation.selected = false;			this.fullSimulation.name = "fullSimulation";			this.fullSimulation.label = this.fullSimulation.selected ? this.buttonLabel[1]:this.buttonLabel[0];			this.fullSimulation.useHandCursor = true;			this.fullSimulation.toggle = true;			this.fullSimulation.addEventListener(MouseEvent.CLICK, onFullSimulationClick);			addChild(this.fullSimulation);			this.addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			this.removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onFullSimulationClick(event:MouseEvent):void {			var tl:TimelineLite = new TimelineLite({paused:true});			var myBtn:Button = event.currentTarget as Button;			this.fullSimulation.label = myBtn.selected ? this.buttonLabel[1]:this.buttonLabel[0];			for (var comp:String in this.isActive) {				if (myBtn.selected && this.isActive[comp] == true) {					//reset the active component;					this.activeComp.name = "";					tl.to(this.activeComp.components, 2, {scale:1,ease:Sine.easeOut});				}				this.isActive[comp] = myBtn.selected;			}			//move the components to their simulation positions, add extra piping and activate them all			if (myBtn.selected) {				tl.to(this.rpValve, 2, {x:0,y:30, ease:Sine.easeOut}, 0);				tl.to(this.regulatingValve, 2, {x:20,y:140, ease:Sine.easeOut}, 0);				tl.to(this.lomv, 2, {x:150,y:155, ease:Sine.easeOut}, 0);				tl.to(this.relayValve, 2, {x:450,y:155, ease:Sine.easeOut}, 0);				tl.to(this.chargingValve, 2, {x:652.5,y:30, ease:Sine.easeOut}, 0);				tl.to(this.bvic, 2, {x:670,y:230, ease:Sine.easeOut}, 0);				this.fullBackground = new FullBackground();				this.fullBackground.name = "fullBackground";				addChild(this.fullBackground);				//component air				this.airLomv = new AirLomv();				this.airLomv.name = "lomv";				this.lomv.addChildAt(this.airLomv,1);				this.airCVtoE = new AirCVtoE();				this.airCVtoE.alpha = 0;				this.chargingValve.addChild(this.airCVtoE);							this.airBvic = new AirBviCock();			this.airBvic.name = "bvic";			this.bvic.addChildAt(this.airBvic,1);						this.airCVOpen = new AirChargingValveOpen();			this.airCVOpen.name = "chargingValve";			this.chargingValve.addChildAt(this.airCVOpen,1);			this.airCVClosed = new AirChargingValveClosed();			this.airCVClosed.name = "chargingValve";			this.airCVClosed.alpha = 0;			this.chargingValve.addChildAt(this.airCVClosed,2);				//pipe air;				this.airRPtoRV = new AirRPtoRV();				this.fullBackground.addChild(this.airRPtoRV);				this.airCVtoRV = new AirCVtoRV();				this.fullBackground.addChild(this.airCVtoRV);				this.airRVtoBV = new AirRVtoBV();				this.fullBackground.addChild(this.airRVtoBV);				this.airBVtoBP = new AirBVtoBP();				this.airBVtoBP.alpha = 0;				this.fullBackground.addChild(this.airBVtoBP);				this.airRVtoLM = new AirRVtoLM();				this.fullBackground.addChild(this.airRVtoLM);				this.airEQ = new AirEQ();				this.fullBackground.addChild(this.airEQ);				tl.from(this.fullBackground, 2, {alpha:0, scale:2}, 0);			} else {				tl.to(this.rpValve, 2, {x:this.rpValveInfo.origX,y:this.rpValveInfo.origY, ease:Back.easeOut}, 0);				tl.to(this.regulatingValve, 2, {x:this.regulatingValveInfo.origX,y:this.regulatingValveInfo.origY, ease:Back.easeOut}, 0);				tl.to(this.lomv, 2, {x:this.lomvInfo.origX,y:this.lomvInfo.origY, ease:Back.easeOut}, 0);				tl.to(this.relayValve, 2, {x:this.relayValveInfo.origX,y:this.relayValveInfo.origY, ease:Back.easeOut}, 0);				tl.to(this.chargingValve, 2, {x:this.chargingValveInfo.origX,y:this.chargingValveInfo.origY, ease:Back.easeOut}, 0);				tl.to(this.bvic, 2, {x:this.bvicInfo.origX,y:this.bvicInfo.origY, ease:Back.easeOut}, 0);				tl.to(this.fullBackground, 2, {alpha:0, scale:2, blurFilter:{blurX:20, blurY:20}, onComplete:this.removeChild, onCompleteParams:[this.fullBackground]}, 0);				//remove erronious air				this.chargingValve.removeChild(this.airCVtoE);				this.airCVtoE = null;				this.lomv.removeChild(this.airLomv);				this.airLomv = null;				this.bvic.removeChild(this.airBvic);				this.airBvic = null;				this.chargingValve.removeChild(this.airCVOpen);				this.airCVOpen = null;				this.chargingValve.removeChild(this.airCVClosed);				this.airCVClosed = null;				this.fullBackground = null;			}			//animate it			tl.play();		}		private function onMouseClick(event:MouseEvent):void {			//find the component and scale it to center screen			//also return the existing component			var tl:TimelineLite = new TimelineLite({paused:true});			if (event.target.name == "fullSimulation" || event.target.name == "fullBackground" || this.fullSimulation.selected) {				return;			}			if (this.activeComp.name != "") {				//reset the active component;				this.isActive[this.activeComp.name] = false;				tl.to(this.activeComp.components, 2, {x:this.activeComp.origX,y:this.activeComp.origY,scale:1,ease:Back.easeOut});			}			//ignore if active component			if (this.activeComp.name == event.target.name) {				this.activeComp.name = "";			} else {// activate it				this.activeComp.name = event.target.name;				switch (this.activeComp.name) {					case "chargingValve" :						this.activeComp.components = this.chargingValve;						this.activeComp.origX = this.chargingValveInfo.origX;						this.activeComp.origY = this.chargingValveInfo.origY;						break;					case "relayValve" :						this.activeComp.components = this.relayValve;						this.activeComp.origX = this.relayValveInfo.origX;						this.activeComp.origY = this.relayValveInfo.origY;						break;					case "lomv" :						this.activeComp.components = this.lomv;						this.activeComp.origX = this.lomvInfo.origX;						this.activeComp.origY = this.lomvInfo.origY;						break;					case "rpValve" :						this.activeComp.components = this.rpValve;						this.activeComp.origX = this.rpValveInfo.origX;						this.activeComp.origY = this.rpValveInfo.origY;						break;					case "bvic" :						this.activeComp.components = this.bvic;						this.activeComp.origX = this.bvicInfo.origX;						this.activeComp.origY = this.bvicInfo.origY;						break;					case "regulatingValve" :						this.activeComp.components = this.regulatingValve;						this.activeComp.origX = this.regulatingValveInfo.origX;						this.activeComp.origY = this.regulatingValveInfo.origY;						break;				}				//remove the component label if any				if (this.compTxt) {					removeChild(this.compTxt);					this.compTxt = null;				}				this.isActive[this.activeComp.name] = true;				tl.to(this.activeComp.components, 2, {x:350,y:100,scale:2,ease:Sine.easeOut},0);			}			//animate it			tl.play();		}		private function onRemovedFromStage(event:Event):void {			this.removeEventListener(MouseEvent.MOUSE_OVER, onMouseOver);			this.removeEventListener(MouseEvent.CLICK, onMouseClick);			this.removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);		}	}}